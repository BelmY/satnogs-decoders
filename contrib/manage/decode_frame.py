#!/usr/bin/env python2
import json
import argparse

from satnogs_db_kaitai import *
from datetime import datetime

DECODERS_MODULE_BASE = 'py2_decoders'


def decode_frame(decoder_name, frame):
    # Load the decoder python class
    decoder_module = '{}.{}'.format(DECODERS_MODULE_BASE, decoder_name)
    decoder = __import__(decoder_module, fromlist='.')
    decoder_class = getattr(decoder,
                            decoder_name.capitalize())

    # Decode the frame
    struct = decoder_class.from_bytes(frame)
    frame_dict = kaitai_to_dict(struct)

    return frame_dict

def get_demodulated_data_json(decoded_frame, timestamp, tags):
    json_obj = []
    kaitai_to_json(decoded_frame, tags, timestamp, json_obj)

    return json_obj


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Decode a raw frame with the selected python decoder (generated by Kaitai) and print its json representation.')
    parser.add_argument('decoder_name', type=str, help='Name of the decoder')
    parser.add_argument('frame_raw_file',
                        type=str,
                        help='Path to the file containing the raw frame')
    args = parser.parse_args()

    # Load the raw frame
    with open(args.frame_raw_file, 'rb') as f:
        frame = f.read()

    decoded_frame = decode_frame(args.decoder_name, frame)

    # Create the json representation of the demodulated frame
    try:
        # Try to decode the timestamp from the filename
        timestamp = datetime.strptime(args.frame_raw_file.split('/')[-1].split('_')[-1], '%Y-%m-%dT%H-%M-%S')
    except ValueError:
        timestamp = datetime.now()

    demoddata_json = get_demodulated_data_json(decoded_frame, timestamp=timestamp, tags={})

    print(json.dumps(demoddata_json, indent=2, sort_keys=True))
